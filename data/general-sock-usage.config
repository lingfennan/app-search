name: "general socket usage, focuses on the server (union of socket-server-client.config and wifi-ble-nfc.config)"
config_filename: "/data/Desktop/port-backdoor/third-party/app-search/data/general-sock-usage.config"
rules {
  name: "tcp inet socket communication"
  disjunct_rules {
    id: "tcp server accept"
    conjunct_rules {
      id: "tcp server accept"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "nio tcp server accept"
    conjunct_rules {
      id: "nio tcp server accept"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.nio.channels.ServerSocketChannel"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "tcp server accept and connect"
    conjunct_rules {
      id: "accept and connect"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
      simple_rules {
        id: "socket connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "java.net.Socket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "tcp server accept and http open connection"
    conjunct_rules {
      id: "accept and connect"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
      simple_rules {
        id: "http connect"
        method_name_or_sub_signature {
          content: "openConnection"
        }
        class_name {
          content: "java.net.URL"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "tcp server accept and http open input stream"
    conjunct_rules {
      id: "accept and connect"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
      simple_rules {
        id: "http open input"
        method_name_or_sub_signature {
          content: "openStream"
        }
        class_name {
          content: "java.net.URL"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "ssl server accept"
    conjunct_rules {
      id: "ssl server accept"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "javax.net.ssl.SSLServerSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "ssl server accept and connect"
    conjunct_rules {
      id: "ssl server accept and connect"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "javax.net.ssl.SSLServerSocket"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "javax.net.ssl.SSLSocket"
        }
      }
      simple_rules {
        id: "create socket connect"
        method_name_or_sub_signature {
          content: "createSocket"
        }
        class_name {
          content: "javax.net.ssl.SSLSocketFactory"
        }
      }
    }
    exhaust: true
  }
}
rules {
  name: "udp inet socket communication"
  disjunct_rules {
    id: "udp port socket receive"
    conjunct_rules {
      id: "udp port socket receive"
      simple_rules {
        id: "receive"
        method_name_or_sub_signature {
          content: "receive"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "nio udp port socket receive"
    conjunct_rules {
      id: "nio udp port socket receive"
      simple_rules {
        id: "receive"
        method_name_or_sub_signature {
          content: "receive"
        }
        class_name {
          content: "java.nio.channels.DatagramChannel"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "udp port socket receive and send"
    conjunct_rules {
      id: "udp port socket receive and send"
      simple_rules {
        id: "send"
        method_name_or_sub_signature {
          content: "send"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
      simple_rules {
        id: "receive"
        method_name_or_sub_signature {
          content: "receive"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
    }
    exhaust: true
  }
}
rules {
  name: "unix socket communication"
  disjunct_rules {
    id: "unix domain server accept"
    conjunct_rules {
      id: "unix domain server accept"
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "android.net.LocalServerSocket"
        }
      }
    }
    exhaust: true
  }
}
rules {
  name: "bluetooth socket communication"
  disjunct_rules {
    id: "bluetooth permission only"
    conjunct_rules {
      id: "bluetooth permission only"
      simple_rules {
        id: "bluetooth permission only"
        permissions {
          content: "android.permission.BLUETOOTH"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "bluetooth and bluetooth admin permission"
    conjunct_rules {
      id: "bluetooth and admin permission"
      simple_rules {
        id: "bluetooth and admin permission"
        permissions {
          content: "android.permission.BLUETOOTH"
        }
        permissions {
          content: "android.permission.BLUETOOTH_ADMIN"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "connect to paired devices"
    conjunct_rules {
      id: "connect to paired devices"
      simple_rules {
        id: "get devices"
        method_name_or_sub_signature {
          content: "getBondedDevices"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        method_name_or_sub_signature {
          content: "createRfcommSocketToServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "discover other devices"
    conjunct_rules {
      id: "discover other devices and connect to them"
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "startDiscovery"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "discover other devices using LeScan"
    conjunct_rules {
      id: "discover using startLeScan"
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "startLeScan"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        method_name_or_sub_signature {
          content: "createRfcommSocketToServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "wait for other devices to connect"
    conjunct_rules {
      id: "wait for other devices to connect"
      simple_rules {
        id: "wait"
        method_name_or_sub_signature {
          content: "listenUsingRfcommWithServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "android.bluetooth.BluetoothServerSocket"
        }
      }
    }
    exhaust: true
  }
}
rules {
  name: "nfc socket communication"
  disjunct_rules {
    id: "uses android nfc"
    conjunct_rules {
      id: "android nfc"
      simple_rules {
        id: "permission nfc"
        permissions {
          content: "android.permission.NFC"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "reader/writer through TAG"
    conjunct_rules {
      id: "get TAG"
      simple_rules {
        id: "get tag from intent, used in ACTION_TECH_DISCOVERED"
        method_name_or_sub_signature {
          content: "getParcelableExtra"
        }
        class_name {
          content: "android.content.Intent"
        }
      }
      simple_rules {
        id: "get the specific Android NFC TagTechnology implementation"
        method_name_or_sub_signature {
          content: "get"
        }
        arg_types: {
          content: "android.nfc.Tag"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "reader/writer mode"
    conjunct_rules {
      id: "reader writer"
      simple_rules {
        id: "enable reader mode"
        method_name_or_sub_signature {
          content: "enableReaderMode"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
      simple_rules {
        id: "nfc message"
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "nfc record"
        class_name {
          content: "android.nfc.NdefRecord"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "p2p mode"
    conjunct_rules {
      id: "communicate"
      simple_rules {
        id: "msg init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "msg push"
        method_name_or_sub_signature {
          content: "setNdefPushMessage"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "p2p mode with callback"
    conjunct_rules {
      id: "communicate with callback"
      simple_rules {
        id: "msg init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "msg push with callback"
        method_name_or_sub_signature {
          content: "setNdefPushMessageCallback"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "card emulation host-based"
    conjunct_rules {
      id: "host based"
      simple_rules {
        id: "process apdu"
        method_name_or_sub_signature {
          content: "processCommandApdu"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "card emulation off-host"
    conjunct_rules {
      id: "off-host"
      simple_rules {
        id: "off host class"
        class_name {
          content: "OffHostApduService"
        }
      }
    }
    exhaust: true
  }
}
rules {
  name: "wifi p2p (this is not relevant to socket, it actually uses sockets)"
  disjunct_rules {
    id: "uses wifi p2p"
    conjunct_rules {
      id: "permission wifi"
      simple_rules {
        id: "permission wifi"
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
        permissions {
          content: "android.permission.ACCESS_WIFI_STATE"
        }
        permissions {
          content: "android.permission.CHANGE_WIFI_STATE"
        }
        permissions {
          content: "android.permission.INTERNET"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "find peers"
    conjunct_rules {
      id: "find peers"
      simple_rules {
        id: "initialize"
        method_name_or_sub_signature {
          content: "initialize"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "discoverPeers"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
    }
    exhaust: true
  }
  disjunct_rules {
    id: "find services"
    conjunct_rules {
      id: "find peers"
      simple_rules {
        id: "initialize"
        method_name_or_sub_signature {
          content: "initialize"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "discoverServices"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
    }
    exhaust: true
  }
}
