name: "control and communication channels"
config_filename: "/Users/ruian/Desktop/Android/app-search/data/ctl-and-comm.config"
rules {
  name: "socket communication"
  disjunct_rules {
    id: "tcp inet address"
    conjunct_rules {
      id: "tcp inet address"
      simple_rules {
        id: "inet"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "java.net.InetSocketAddress"
        }
      }
      simple_rules {
        id: "no bind"
        negate: true
        method_name_or_sub_signature {
          content: "bind"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "tcp port serversocket"
    conjunct_rules {
      id: "tcp port serversocket"
      simple_rules {
        id: "socket init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "ssl port serversocket"
    conjunct_rules {
      id: "ssl port serversocket"
      simple_rules {
        id: "create socket"
        method_name_or_sub_signature {
          content: "createServerSocket"
        }
        class_name {
          content: "javax.net.ssl.SSLServerSocketFactory"
        }
      }
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "javax.net.ssl.SSLServerSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "udp port socket"
    conjunct_rules {
      id: "udp port socket"
      simple_rules {
        id: "socket init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "java.net.DatagramPacket"
        }
      }
      simple_rules {
        id: "no send"
        negate: true
        method_name_or_sub_signature {
          content: "send"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
      simple_rules {
        id: "receive"
        method_name_or_sub_signature {
          content: "receive"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "udp inet socket"
    conjunct_rules {
      id: "udp inet socket"
      simple_rules {
        id: "inet"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "java.net.InetSocketAddress"
        }
      }
      simple_rules {
        id: "receive"
        method_name_or_sub_signature {
          content: "receive"
        }
        class_name {
          content: "java.net.DatagramSocket"
        }
      }
    }
  }
}
rules {
  name: "bluetooth"
  disjunct_rules {
    id: "used bluetooth"
    conjunct_rules {
      id: "used bluetooth"
      simple_rules {
        id: "bluetooth permissions"
        permissions {
          content: "android.permission.BLUETOOTH"
        }
        permissions {
          content: "android.permission.BLUETOOTH_ADMIN"
        }
      }
    }
  }
  disjunct_rules {
    id: "connect to paired devices"
    conjunct_rules {
      id: "connect to paired devices"
      simple_rules {
        id: "get devices"
        method_name_or_sub_signature {
          content: "getBondedDevices"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        method_name_or_sub_signature {
          content: "createRfcommSocketToServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "discover other devices"
    conjunct_rules {
      id: "discover other devices and connect to them"
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "startDiscovery"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "discover other devices using LeScan"
    conjunct_rules {
      id: "discover using startLeScan"
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "startLeScan"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "create socket"
        method_name_or_sub_signature {
          content: "createRfcommSocketToServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothDevice"
        }
      }
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "android.bluetooth.BluetoothSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "wait for other devices to connect"
    conjunct_rules {
      id: "wait for other devices to connect"
      simple_rules {
        id: "wait"
        method_name_or_sub_signature {
          content: "listenUsingRfcommWithServiceRecord"
        }
        class_name {
          content: "android.bluetooth.BluetoothAdapter"
        }
      }
      simple_rules {
        id: "accept"
        method_name_or_sub_signature {
          content: "accept"
        }
        class_name {
          content: "android.bluetooth.BluetoothServerSocket"
        }
      }
    }
  }
}
rules {
  name: "wifi p2p"
  disjunct_rules {
    id: "uses wifi p2p"
    conjunct_rules {
      id: "permission wifi"
      simple_rules {
        id: "permission wifi"
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
        permissions {
          content: "android.permission.ACCESS_WIFI_STATE"
        }
        permissions {
          content: "android.permission.CHANGE_WIFI_STATE"
        }
        permissions {
          content: "android.permission.INTERNET"
        }
      }
    }
  }
  disjunct_rules {
    id: "find peers"
    conjunct_rules {
      id: "find and connect to peers"
      simple_rules {
        id: "initialize"
        method_name_or_sub_signature {
          content: "initialize"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "discoverPeers"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
    }
    conjunct_rules {
      id: "normal server socket"
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
    }
  }
  disjunct_rules {
    id: "find services"
    conjunct_rules {
      id: "find and connect to peers"
      simple_rules {
        id: "initialize"
        method_name_or_sub_signature {
          content: "initialize"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
      simple_rules {
        id: "discover"
        method_name_or_sub_signature {
          content: "discoverServices"
        }
        class_name {
          content: "android.net.wifi.p2p.WifiP2pManager"
        }
      }
    }
    conjunct_rules {
      id: "normal server socket"
      simple_rules {
        id: "connect"
        method_name_or_sub_signature {
          content: "connect"
        }
        class_name {
          content: "java.net.ServerSocket"
        }
      }
    }
  }
}
rules {
  name: "android nfc"
  disjunct_rules {
    id: "uses android nfc"
    conjunct_rules {
      id: "android nfc"
      simple_rules {
        id: "permission nfc"
        permissions {
          content: "android.permission.NFC"
        }
      }
    }
  }
  disjunct_rules {
    id: "reader/writer mode"
    conjunct_rules {
      id: "reader writer"
      simple_rules {
        id: "enable reader mode"
        method_name_or_sub_signature {
          content: "enableReaderMode"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
      simple_rules {
        id: "nfc message"
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "nfc record"
        class_name {
          content: "android.nfc.NdefRecord"
        }
      }
    }
  }
  disjunct_rules {
    id: "p2p mode"
    conjunct_rules {
      id: "communicate"
      simple_rules {
        id: "msg init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "msg push"
        method_name_or_sub_signature {
          content: "setNdefPushMessage"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
    }
  }
  disjunct_rules {
    id: "p2p mode with callback"
    conjunct_rules {
      id: "communicate with callback"
      simple_rules {
        id: "msg init"
        method_name_or_sub_signature {
          content: "<init>"
        }
        class_name {
          content: "android.nfc.NdefMessage"
        }
      }
      simple_rules {
        id: "msg push with callback"
        method_name_or_sub_signature {
          content: "setNdefPushMessageCallback"
        }
        class_name {
          content: "android.nfc.NfcAdapter"
        }
      }
    }
  }
  disjunct_rules {
    id: "card emulation host-based"
    conjunct_rules {
      id: "host based"
      simple_rules {
        id: "process apdu"
        method_name_or_sub_signature {
          content: "processCommandApdu"
        }
      }
    }
  }
  disjunct_rules {
    id: "card emulation off-host"
    conjunct_rules {
      id: "off-host"
      simple_rules {
        id: "off host class"
        class_name {
          content: "OffHostApduService"
        }
      }
    }
  }
}

